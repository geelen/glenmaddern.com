"Interoperable CSS"

Some scene-setting. "All this has happened before. All this will happen again."
CSS is going through a big shift. It is similar to JS.

HISTORY OF JS
  Was v8 a big deal?
  How did early Node and CJS interplay?
end with NPM graph

7 problems of CSS
  Kicked off a big wave of new ideas in CSS
  CSS folks like myself saw it as a challenge
  JS folks had a head start on the 7 problems but then had to recreate a bunch of CSS
  Pseudo selectors are particularly difficult

"CSS Modules is what we wanted. Interoperable CSS is how we did it"

What CSS Modules lets you do from a react POV (compared to inline styles)
  Example of CSS Modules
  Buttons? Single class
  Show the ICSS
  Multiple variants, full one-file example.
  Show the ICSS
  "You need Webpack, JSPM, Browserify or a Node require hook to make this make sense, but once you have that, a whole new world opens up"

How it solves the 7 problems
  "The first thing we solved is #1 & 7"
  "Let's talk about number 5 â€” reuse"

Variables vs composition
  "Only reusing half of each line"
  Lol settings.scss
  "Composes isn't just useful for assembling variants, but can be used to reuse visual traits across your whole application"

Back to the 7 problems
  "2 and 6 are already solved"
  "We effectively have metadata about the file & a dependency graph so 3 & 4 are possible (but not implemented)

ICSS as a compile target.
  CSS Modules is just PostCSS transforms
  "If you have strong ideas about how CSS could be done better, you can write your own plugin chain, get real-world feedback, get ideas added to CSS Modules"

End with:
	Styling is a pretty different task to building the rest of your app
	CSS is powerful, it was just incomplete
	Good design should make it easier to produce high quality code than bad. React did this. How many different types of rendering bugs did we simply leave behind when we moved to React.
	

Conclusion
