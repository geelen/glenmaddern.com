$breakpoints: "small", "medium", "large";
$prefix: "_";
$attr: false;

@mixin attr() {
  @if $attr {
    [#{$prefix}#{$attr}] {
      @content;
    }
  }
  @else {
    @warn "attr() needs to be called within an AM block";
  }
}

@mixin val($value) {
  @if $attr {
    [#{$prefix}#{$attr}~="#{$value}"] {
      @content;
    }

    @each $bp in $breakpoints {
      .breakpoint-#{$bp} [#{$prefix}#{$attr}~="#{$bp}:#{$value}"] {
        @extend [#{$prefix}#{$attr}~="#{$value}"];
      }
    }
  }
  @else {
    @warn "attr() needs to be called within an AM block";
  }
}

@mixin AM($local-attr) {
  $attr: $local-attr;
  @content;
  $attr: false;
}

@mixin extend($attr, $value: "") {
  @extend [#{$prefix}#{$attr}];
  $string: $value;
  $continue: true;
  @while $continue {
    $next-space: str-index($string, ' ');
    @if type-of($next-space) == number {
      $next-word: str-slice($string, 1, $next-space - 1);
      $string: str-slice($string, $next-space + 1);
    }
    @else {
      $next-word: $string;
      $continue: false;
    }
    @extend [#{$prefix}#{$attr}~="#{$next-word}"];
  }
}

@import '_shared/reset';
@import '_shared/traits/layout';
@import '_shared/traits/flex';
@import '_shared/traits/type';
@import '_shared/traits/link';
@import '_shared/traits/after';
@import '_shared/traits/border';
@import '_shared/traits/background';
@import '_shared/traits/size';

@import '_shared/modules/markdown';
@import '_shared/modules/youtube';
@import '_shared/modules/form';

*,*::before,*::after {
  box-sizing: border-box;
}
:root {
  @extend [_type~="sans"];
  color: hsl(220, 50%, 25%);
  font-weight: 400;
  font-size: 20px;
  min-height: 100%;
}
:root.breakpoint-small {
  font-size: 18px;
}
body {
  @extend [_background~="gradient"];
  text-rendering: optimizeLegibility;
  min-height: 100%;
}
